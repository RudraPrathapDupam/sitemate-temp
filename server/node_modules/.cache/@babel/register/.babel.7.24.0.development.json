{"{\"assumptions\":{},\"sourceRoot\":\"/Users/ronin/work/sitemate/server/src/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/ronin/work/sitemate/server\",\"filename\":\"/Users/ronin/work/sitemate/server/src/index.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/ronin/work/sitemate/server\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.24.0:development":{"value":{"code":"import 'dotenv/config';\nimport express from 'express';\nimport mongoose from 'mongoose';\nimport https from 'https';\nimport { readFileSync } from 'fs';\nimport { resolve, join } from 'path';\nimport routes from './routes';\nimport { seedDb } from './utils/seed';\nconst app = express();\n\n// Bodyparser Middleware\napp.use(express.json());\napp.use(express.urlencoded({\n  extended: true\n}));\nconst isProduction = process.env.NODE_ENV === 'production';\n\n// DB Config\nconst dbConnection = isProduction ? process.env.MONGO_URI_PROD : process.env.MONGO_URI_DEV;\n\n// Connect to Mongo\nmongoose.connect(dbConnection, {\n  useNewUrlParser: true,\n  useCreateIndex: true,\n  useUnifiedTopology: true,\n  useFindAndModify: false\n}).then(() => {\n  console.log('MongoDB Connected...');\n  seedDb();\n}).catch(err => console.log(err));\n\n// Use Routes\napp.use('/', routes);\napp.use('/public/images', express.static(join(__dirname, '../public/images')));\n\n// Serve static assets if in production\nif (isProduction) {\n  const port = process.env.PORT || 80;\n  app.listen(port, () => console.log(`Server started on port ${port}`));\n} else {\n  const port = process.env.PORT || 5000;\n  const server = https.createServer(httpsOptions, app).listen(port, () => {\n    console.log('https server running at ' + port);\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHByZXNzIiwibW9uZ29vc2UiLCJodHRwcyIsInJlYWRGaWxlU3luYyIsInJlc29sdmUiLCJqb2luIiwicm91dGVzIiwic2VlZERiIiwiYXBwIiwidXNlIiwianNvbiIsInVybGVuY29kZWQiLCJleHRlbmRlZCIsImlzUHJvZHVjdGlvbiIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsImRiQ29ubmVjdGlvbiIsIk1PTkdPX1VSSV9QUk9EIiwiTU9OR09fVVJJX0RFViIsImNvbm5lY3QiLCJ1c2VOZXdVcmxQYXJzZXIiLCJ1c2VDcmVhdGVJbmRleCIsInVzZVVuaWZpZWRUb3BvbG9neSIsInVzZUZpbmRBbmRNb2RpZnkiLCJ0aGVuIiwiY29uc29sZSIsImxvZyIsImNhdGNoIiwiZXJyIiwic3RhdGljIiwiX19kaXJuYW1lIiwicG9ydCIsIlBPUlQiLCJsaXN0ZW4iLCJzZXJ2ZXIiLCJjcmVhdGVTZXJ2ZXIiLCJodHRwc09wdGlvbnMiXSwic291cmNlUm9vdCI6Ii9Vc2Vycy9yb25pbi93b3JrL3NpdGVtYXRlL3NlcnZlci9zcmMvIiwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ2RvdGVudi9jb25maWcnO1xuaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgbW9uZ29vc2UgZnJvbSAnbW9uZ29vc2UnO1xuaW1wb3J0IGh0dHBzIGZyb20gJ2h0dHBzJztcbmltcG9ydCB7IHJlYWRGaWxlU3luYyB9IGZyb20gJ2ZzJztcbmltcG9ydCB7IHJlc29sdmUsIGpvaW4gfSBmcm9tICdwYXRoJztcblxuaW1wb3J0IHJvdXRlcyBmcm9tICcuL3JvdXRlcyc7XG5pbXBvcnQgeyBzZWVkRGIgfSBmcm9tICcuL3V0aWxzL3NlZWQnO1xuXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XG5cbi8vIEJvZHlwYXJzZXIgTWlkZGxld2FyZVxuYXBwLnVzZShleHByZXNzLmpzb24oKSk7XG5hcHAudXNlKGV4cHJlc3MudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiB0cnVlIH0pKTtcblxuY29uc3QgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcblxuLy8gREIgQ29uZmlnXG5jb25zdCBkYkNvbm5lY3Rpb24gPSBpc1Byb2R1Y3Rpb24gPyBwcm9jZXNzLmVudi5NT05HT19VUklfUFJPRCA6IHByb2Nlc3MuZW52Lk1PTkdPX1VSSV9ERVY7XG5cbi8vIENvbm5lY3QgdG8gTW9uZ29cbm1vbmdvb3NlXG4gIC5jb25uZWN0KGRiQ29ubmVjdGlvbiwge1xuICAgIHVzZU5ld1VybFBhcnNlcjogdHJ1ZSxcbiAgICB1c2VDcmVhdGVJbmRleDogdHJ1ZSxcbiAgICB1c2VVbmlmaWVkVG9wb2xvZ3k6IHRydWUsXG4gICAgdXNlRmluZEFuZE1vZGlmeTogZmFsc2UsXG4gIH0pXG4gIC50aGVuKCgpID0+IHtcbiAgICBjb25zb2xlLmxvZygnTW9uZ29EQiBDb25uZWN0ZWQuLi4nKTtcbiAgICBzZWVkRGIoKTtcbiAgfSlcbiAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUubG9nKGVycikpO1xuXG4vLyBVc2UgUm91dGVzXG5hcHAudXNlKCcvJywgcm91dGVzKTtcbmFwcC51c2UoJy9wdWJsaWMvaW1hZ2VzJywgZXhwcmVzcy5zdGF0aWMoam9pbihfX2Rpcm5hbWUsICcuLi9wdWJsaWMvaW1hZ2VzJykpKTtcblxuLy8gU2VydmUgc3RhdGljIGFzc2V0cyBpZiBpbiBwcm9kdWN0aW9uXG5pZiAoaXNQcm9kdWN0aW9uKSB7XG4gIGNvbnN0IHBvcnQgPSBwcm9jZXNzLmVudi5QT1JUIHx8IDgwO1xuICBhcHAubGlzdGVuKHBvcnQsICgpID0+IGNvbnNvbGUubG9nKGBTZXJ2ZXIgc3RhcnRlZCBvbiBwb3J0ICR7cG9ydH1gKSk7XG59IGVsc2Uge1xuICBjb25zdCBwb3J0ID0gcHJvY2Vzcy5lbnYuUE9SVCB8fCA1MDAwO1xuICBjb25zdCBzZXJ2ZXIgPSBodHRwcy5jcmVhdGVTZXJ2ZXIoaHR0cHNPcHRpb25zLCBhcHApLmxpc3Rlbihwb3J0LCAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ2h0dHBzIHNlcnZlciBydW5uaW5nIGF0ICcgKyBwb3J0KTtcbiAgfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sZUFBZTtBQUN0QixPQUFPQSxPQUFPLE1BQU0sU0FBUztBQUM3QixPQUFPQyxRQUFRLE1BQU0sVUFBVTtBQUMvQixPQUFPQyxLQUFLLE1BQU0sT0FBTztBQUN6QixTQUFTQyxZQUFZLFFBQVEsSUFBSTtBQUNqQyxTQUFTQyxPQUFPLEVBQUVDLElBQUksUUFBUSxNQUFNO0FBRXBDLE9BQU9DLE1BQU0sTUFBTSxVQUFVO0FBQzdCLFNBQVNDLE1BQU0sUUFBUSxjQUFjO0FBRXJDLE1BQU1DLEdBQUcsR0FBR1IsT0FBTyxDQUFDLENBQUM7O0FBRXJCO0FBQ0FRLEdBQUcsQ0FBQ0MsR0FBRyxDQUFDVCxPQUFPLENBQUNVLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDdkJGLEdBQUcsQ0FBQ0MsR0FBRyxDQUFDVCxPQUFPLENBQUNXLFVBQVUsQ0FBQztFQUFFQyxRQUFRLEVBQUU7QUFBSyxDQUFDLENBQUMsQ0FBQztBQUUvQyxNQUFNQyxZQUFZLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxRQUFRLEtBQUssWUFBWTs7QUFFMUQ7QUFDQSxNQUFNQyxZQUFZLEdBQUdKLFlBQVksR0FBR0MsT0FBTyxDQUFDQyxHQUFHLENBQUNHLGNBQWMsR0FBR0osT0FBTyxDQUFDQyxHQUFHLENBQUNJLGFBQWE7O0FBRTFGO0FBQ0FsQixRQUFRLENBQ0xtQixPQUFPLENBQUNILFlBQVksRUFBRTtFQUNyQkksZUFBZSxFQUFFLElBQUk7RUFDckJDLGNBQWMsRUFBRSxJQUFJO0VBQ3BCQyxrQkFBa0IsRUFBRSxJQUFJO0VBQ3hCQyxnQkFBZ0IsRUFBRTtBQUNwQixDQUFDLENBQUMsQ0FDREMsSUFBSSxDQUFDLE1BQU07RUFDVkMsT0FBTyxDQUFDQyxHQUFHLENBQUMsc0JBQXNCLENBQUM7RUFDbkNwQixNQUFNLENBQUMsQ0FBQztBQUNWLENBQUMsQ0FBQyxDQUNEcUIsS0FBSyxDQUFFQyxHQUFHLElBQUtILE9BQU8sQ0FBQ0MsR0FBRyxDQUFDRSxHQUFHLENBQUMsQ0FBQzs7QUFFbkM7QUFDQXJCLEdBQUcsQ0FBQ0MsR0FBRyxDQUFDLEdBQUcsRUFBRUgsTUFBTSxDQUFDO0FBQ3BCRSxHQUFHLENBQUNDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRVQsT0FBTyxDQUFDOEIsTUFBTSxDQUFDekIsSUFBSSxDQUFDMEIsU0FBUyxFQUFFLGtCQUFrQixDQUFDLENBQUMsQ0FBQzs7QUFFOUU7QUFDQSxJQUFJbEIsWUFBWSxFQUFFO0VBQ2hCLE1BQU1tQixJQUFJLEdBQUdsQixPQUFPLENBQUNDLEdBQUcsQ0FBQ2tCLElBQUksSUFBSSxFQUFFO0VBQ25DekIsR0FBRyxDQUFDMEIsTUFBTSxDQUFDRixJQUFJLEVBQUUsTUFBTU4sT0FBTyxDQUFDQyxHQUFHLENBQUUsMEJBQXlCSyxJQUFLLEVBQUMsQ0FBQyxDQUFDO0FBQ3ZFLENBQUMsTUFBTTtFQUNMLE1BQU1BLElBQUksR0FBR2xCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDa0IsSUFBSSxJQUFJLElBQUk7RUFDckMsTUFBTUUsTUFBTSxHQUFHakMsS0FBSyxDQUFDa0MsWUFBWSxDQUFDQyxZQUFZLEVBQUU3QixHQUFHLENBQUMsQ0FBQzBCLE1BQU0sQ0FBQ0YsSUFBSSxFQUFFLE1BQU07SUFDdEVOLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDBCQUEwQixHQUFHSyxJQUFJLENBQUM7RUFDaEQsQ0FBQyxDQUFDO0FBQ0oiLCJpZ25vcmVMaXN0IjpbXX0=","map":{"version":3,"names":["express","mongoose","https","readFileSync","resolve","join","routes","seedDb","app","use","json","urlencoded","extended","isProduction","process","env","NODE_ENV","dbConnection","MONGO_URI_PROD","MONGO_URI_DEV","connect","useNewUrlParser","useCreateIndex","useUnifiedTopology","useFindAndModify","then","console","log","catch","err","static","__dirname","port","PORT","listen","server","createServer","httpsOptions"],"sourceRoot":"/Users/ronin/work/sitemate/server/src/","sources":["index.js"],"sourcesContent":["import 'dotenv/config';\nimport express from 'express';\nimport mongoose from 'mongoose';\nimport https from 'https';\nimport { readFileSync } from 'fs';\nimport { resolve, join } from 'path';\n\nimport routes from './routes';\nimport { seedDb } from './utils/seed';\n\nconst app = express();\n\n// Bodyparser Middleware\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\nconst isProduction = process.env.NODE_ENV === 'production';\n\n// DB Config\nconst dbConnection = isProduction ? process.env.MONGO_URI_PROD : process.env.MONGO_URI_DEV;\n\n// Connect to Mongo\nmongoose\n  .connect(dbConnection, {\n    useNewUrlParser: true,\n    useCreateIndex: true,\n    useUnifiedTopology: true,\n    useFindAndModify: false,\n  })\n  .then(() => {\n    console.log('MongoDB Connected...');\n    seedDb();\n  })\n  .catch((err) => console.log(err));\n\n// Use Routes\napp.use('/', routes);\napp.use('/public/images', express.static(join(__dirname, '../public/images')));\n\n// Serve static assets if in production\nif (isProduction) {\n  const port = process.env.PORT || 80;\n  app.listen(port, () => console.log(`Server started on port ${port}`));\n} else {\n  const port = process.env.PORT || 5000;\n  const server = https.createServer(httpsOptions, app).listen(port, () => {\n    console.log('https server running at ' + port);\n  });\n}\n"],"mappings":"AAAA,OAAO,eAAe;AACtB,OAAOA,OAAO,MAAM,SAAS;AAC7B,OAAOC,QAAQ,MAAM,UAAU;AAC/B,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,IAAI;AACjC,SAASC,OAAO,EAAEC,IAAI,QAAQ,MAAM;AAEpC,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,MAAM,QAAQ,cAAc;AAErC,MAAMC,GAAG,GAAGR,OAAO,CAAC,CAAC;;AAErB;AACAQ,GAAG,CAACC,GAAG,CAACT,OAAO,CAACU,IAAI,CAAC,CAAC,CAAC;AACvBF,GAAG,CAACC,GAAG,CAACT,OAAO,CAACW,UAAU,CAAC;EAAEC,QAAQ,EAAE;AAAK,CAAC,CAAC,CAAC;AAE/C,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY;;AAE1D;AACA,MAAMC,YAAY,GAAGJ,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACG,cAAc,GAAGJ,OAAO,CAACC,GAAG,CAACI,aAAa;;AAE1F;AACAlB,QAAQ,CACLmB,OAAO,CAACH,YAAY,EAAE;EACrBI,eAAe,EAAE,IAAI;EACrBC,cAAc,EAAE,IAAI;EACpBC,kBAAkB,EAAE,IAAI;EACxBC,gBAAgB,EAAE;AACpB,CAAC,CAAC,CACDC,IAAI,CAAC,MAAM;EACVC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;EACnCpB,MAAM,CAAC,CAAC;AACV,CAAC,CAAC,CACDqB,KAAK,CAAEC,GAAG,IAAKH,OAAO,CAACC,GAAG,CAACE,GAAG,CAAC,CAAC;;AAEnC;AACArB,GAAG,CAACC,GAAG,CAAC,GAAG,EAAEH,MAAM,CAAC;AACpBE,GAAG,CAACC,GAAG,CAAC,gBAAgB,EAAET,OAAO,CAAC8B,MAAM,CAACzB,IAAI,CAAC0B,SAAS,EAAE,kBAAkB,CAAC,CAAC,CAAC;;AAE9E;AACA,IAAIlB,YAAY,EAAE;EAChB,MAAMmB,IAAI,GAAGlB,OAAO,CAACC,GAAG,CAACkB,IAAI,IAAI,EAAE;EACnCzB,GAAG,CAAC0B,MAAM,CAACF,IAAI,EAAE,MAAMN,OAAO,CAACC,GAAG,CAAE,0BAAyBK,IAAK,EAAC,CAAC,CAAC;AACvE,CAAC,MAAM;EACL,MAAMA,IAAI,GAAGlB,OAAO,CAACC,GAAG,CAACkB,IAAI,IAAI,IAAI;EACrC,MAAME,MAAM,GAAGjC,KAAK,CAACkC,YAAY,CAACC,YAAY,EAAE7B,GAAG,CAAC,CAAC0B,MAAM,CAACF,IAAI,EAAE,MAAM;IACtEN,OAAO,CAACC,GAAG,CAAC,0BAA0B,GAAGK,IAAI,CAAC;EAChD,CAAC,CAAC;AACJ","ignoreList":[]}},"mtime":1710585930080}}